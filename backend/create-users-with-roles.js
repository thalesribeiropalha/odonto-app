const { createClient } = require('@supabase/supabase-js');
const bcrypt = require('bcryptjs');
require('dotenv').config();

console.log('üîÑ Criando usu√°rios com diferentes perfis...');

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY
);

async function createUsersWithRoles() {
  try {
    const organizationId = 'fc380e62-de4e-495d-9914-d5fbb5447058';
    
    // Senha padr√£o para todos os usu√°rios de teste
    const defaultPassword = 'teste123';
    const hashedPassword = await bcrypt.hash(defaultPassword, 12);
    
    const testUsers = [
      {
        name: 'Dr. Propriet√°rio Sistema',
        email: 'owner@teste.com',
        password: hashedPassword,
        role: 'owner',
        organization_id: null, // Owner n√£o precisa de organiza√ß√£o espec√≠fica
        permissions: ['*'],
        is_active: true
      },
      {
        name: 'Admin Cl√≠nica',
        email: 'admin@teste.com',
        password: hashedPassword,
        role: 'admin',
        organization_id: organizationId,
        permissions: [
          'organization.manage',
          'users.create', 'users.read', 'users.update', 'users.delete',
          'patients.create', 'patients.read', 'patients.update', 'patients.delete',
          'appointments.create', 'appointments.read', 'appointments.update', 'appointments.delete',
          'financial.create', 'financial.read', 'financial.update', 'financial.delete',
          'reports.read'
        ],
        is_active: true
      },
      {
        name: 'Dr. Jo√£o Dentista',
        email: 'dentist@teste.com',
        password: hashedPassword,
        role: 'dentist',
        organization_id: organizationId,
        permissions: [
          'patients.create', 'patients.read', 'patients.update', 'patients.delete',
          'appointments.create', 'appointments.read', 'appointments.update', 'appointments.delete',
          'financial.create', 'financial.read', 'financial.update', 'financial.delete'
        ],
        is_active: true
      },
      {
        name: 'Maria Secret√°ria',
        email: 'secretary@teste.com',
        password: hashedPassword,
        role: 'secretary',
        organization_id: organizationId,
        permissions: [
          'patients.create', 'patients.read', 'patients.update', 'patients.delete',
          'appointments.create', 'appointments.read', 'appointments.update', 'appointments.delete',
          'financial.create', 'financial.read', 'financial.update', 'financial.delete'
        ],
        is_active: true
      }
    ];
    
    console.log(`\nüéØ Criando ${testUsers.length} usu√°rios de teste...`);
    
    for (let i = 0; i < testUsers.length; i++) {
      const userData = testUsers[i];
      console.log(`\nüìù Criando usu√°rio ${i + 1}: ${userData.name} (${userData.role})`);
      
      // Verificar se usu√°rio j√° existe
      const { data: existingUser } = await supabase
        .from('users')
        .select('id')
        .eq('email', userData.email)
        .single();
      
      if (existingUser) {
        console.log(`‚ö†Ô∏è  Usu√°rio ${userData.email} j√° existe. Pulando...`);
        continue;
      }
      
      const { data, error } = await supabase
        .from('users')
        .insert([userData])
        .select('id, name, email, role')
        .single();
      
      if (error) {
        console.error(`‚ùå Erro ao criar ${userData.name}:`, error);
      } else {
        console.log(`‚úÖ ${userData.name} criado com ID: ${data.id}`);
        console.log(`   üìß Email: ${data.email}`);
        console.log(`   üë§ Role: ${data.role}`);
        console.log(`   üîë Senha: ${defaultPassword}`);
      }
    }
    
    // Verificar usu√°rios criados por role
    console.log(`\nüìä Verificando usu√°rios por perfil...`);
    
    const roles = ['owner', 'admin', 'dentist', 'secretary'];
    
    for (const role of roles) {
      const { count, error } = await supabase
        .from('users')
        .select('*', { count: 'exact', head: true })
        .eq('role', role)
        .eq('is_active', true);
      
      if (error) {
        console.error(`‚ùå Erro ao contar usu√°rios ${role}:`, error);
      } else {
        console.log(`   ${role}: ${count || 0} usu√°rio(s)`);
      }
    }
    
    console.log('\nüéâ Usu√°rios de teste criados com sucesso!');
    console.log('\nüîê Credenciais para teste:');
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log('üìß owner@teste.com     | üîë teste123 | üëë Propriet√°rio');
    console.log('üìß admin@teste.com     | üîë teste123 | üõ†Ô∏è  Admin');
    console.log('üìß dentist@teste.com   | üîë teste123 | ü¶∑ Dentista');
    console.log('üìß secretary@teste.com | üîë teste123 | üìù Secret√°ria');
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    
  } catch (error) {
    console.error('üí• Erro geral:', error.message);
  }
}

createUsersWithRoles();



