const axios = require('axios');

const BASE_URL = 'http://localhost:3002';

// Credenciais do usu√°rio admin/owner
const loginData = {
  email: 'demo@odonto.com',
  password: 'admin123'
};

let authToken = '';
let testOrgId = '';

async function makeRequest(method, endpoint, data = null, headers = {}) {
  try {
    const config = {
      method,
      url: `${BASE_URL}${endpoint}`,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${authToken}`,
        ...headers
      }
    };
    
    if (data) {
      config.data = data;
    }
    
    const response = await axios(config);
    return { success: true, data: response.data, status: response.status };
  } catch (error) {
    return { 
      success: false, 
      error: error.response?.data || error.message,
      status: error.response?.status
    };
  }
}

async function login() {
  console.log('üîê Fazendo login...');
  
  const result = await makeRequest('POST', '/api/auth/login', loginData);
  
  if (result.success && result.data.token) {
    authToken = result.data.token;
    console.log('‚úÖ Login realizado com sucesso!');
    console.log(`   Token: ${authToken.substring(0, 30)}...`);
    return true;
  } else {
    console.error('‚ùå Erro no login:', result.error);
    return false;
  }
}

async function testGetMyOrganization() {
  console.log('\nüè¢ Testando GET /api/organizations/my');
  
  const result = await makeRequest('GET', '/api/organizations/my');
  
  if (result.success) {
    console.log('‚úÖ Busca da minha organiza√ß√£o funcionando!');
    console.log(`   Nome: ${result.data.organization.name}`);
    console.log(`   Email: ${result.data.organization.email}`);
    console.log(`   Slug: ${result.data.organization.slug}`);
  } else {
    console.error('‚ùå Erro ao buscar minha organiza√ß√£o:', result.error);
  }
  
  return result.success;
}

async function testGetMyOrganizationStats() {
  console.log('\nüìä Testando GET /api/organizations/my/stats');
  
  const result = await makeRequest('GET', '/api/organizations/my/stats');
  
  if (result.success) {
    console.log('‚úÖ Estat√≠sticas da organiza√ß√£o funcionando!');
    console.log(`   Usu√°rios ativos: ${result.data.stats.activeUsers}`);
    console.log(`   M√°x usu√°rios: ${result.data.stats.maxUsers}`);
    console.log(`   Total pacientes: ${result.data.stats.totalPatients}`);
  } else {
    console.error('‚ùå Erro ao buscar estat√≠sticas da organiza√ß√£o:', result.error);
  }
  
  return result.success;
}

async function testUpdateMyOrganization() {
  console.log('\n‚úèÔ∏è  Testando PUT /api/organizations/my');
  
  const updateData = {
    name: 'Cl√≠nica Demo - ATUALIZADA',
    phone: '(11) 99999-9999',
    address: {
      street: 'Rua Atualizada, 456',
      neighborhood: 'Centro Atualizado',
      city: 'S√£o Paulo',
      state: 'SP',
      zip_code: '01001-001'
    },
    settings: {
      timezone: 'America/Sao_Paulo',
      workingHours: {
        start: '08:00',
        end: '18:00'
      }
    }
  };
  
  // Primeiro, vamos pegar o ID da nossa organiza√ß√£o
  const myOrgResult = await makeRequest('GET', '/api/organizations/my');
  if (!myOrgResult.success) {
    console.error('‚ùå Erro ao obter ID da organiza√ß√£o');
    return false;
  }
  
  const orgId = myOrgResult.data.organization.id;
  const result = await makeRequest('PUT', `/api/organizations/${orgId}`, updateData);
  
  if (result.success) {
    console.log('‚úÖ Atualiza√ß√£o da organiza√ß√£o funcionando!');
    console.log(`   Nome atualizado: ${result.data.organization.name}`);
    console.log(`   Telefone: ${result.data.organization.phone}`);
  } else {
    console.error('‚ùå Erro ao atualizar organiza√ß√£o:', result.error);
  }
  
  return result.success;
}

async function testGetOrganizationById() {
  console.log('\nüîç Testando GET /api/organizations/:id');
  
  // Primeiro, vamos pegar o ID da nossa organiza√ß√£o
  const myOrgResult = await makeRequest('GET', '/api/organizations/my');
  if (!myOrgResult.success) {
    console.error('‚ùå Erro ao obter ID da organiza√ß√£o');
    return false;
  }
  
  const orgId = myOrgResult.data.organization.id;
  const result = await makeRequest('GET', `/api/organizations/${orgId}`);
  
  if (result.success) {
    console.log('‚úÖ Busca de organiza√ß√£o por ID funcionando!');
    console.log(`   Nome: ${result.data.organization.name}`);
    console.log(`   Email: ${result.data.organization.email}`);
    console.log(`   Status: ${result.data.organization.isActive ? 'Ativo' : 'Inativo'}`);
  } else {
    console.error('‚ùå Erro ao buscar organiza√ß√£o por ID:', result.error);
  }
  
  return result.success;
}

async function testGetAllOrganizations() {
  console.log('\nüìã Testando GET /api/organizations (listar todas)');
  
  const result = await makeRequest('GET', '/api/organizations');
  
  if (result.success) {
    console.log('‚úÖ Listagem de organiza√ß√µes funcionando!');
    console.log(`   Organiza√ß√µes encontradas: ${result.data.organizations?.length || 0}`);
    if (result.data.organizations && result.data.organizations.length > 0) {
      console.log(`   Primeira organiza√ß√£o: ${result.data.organizations[0].name}`);
    }
  } else {
    // Se der erro de permiss√£o, √© normal para usu√°rios owner (apenas admin pode listar todas)
    if (result.error.message?.includes('administradores')) {
      console.log('‚ö†Ô∏è  Acesso negado - apenas admin pode listar todas organiza√ß√µes (comportamento esperado)');
      return true; // Consideramos sucesso pois a valida√ß√£o est√° funcionando
    }
    console.error('‚ùå Erro ao buscar organiza√ß√µes:', result.error);
  }
  
  return result.success;
}

async function testGetSystemStats() {
  console.log('\nüìà Testando GET /api/organizations/stats (sistema)');
  
  const result = await makeRequest('GET', '/api/organizations/stats');
  
  if (result.success) {
    console.log('‚úÖ Estat√≠sticas do sistema funcionando!');
    console.log(`   Total organiza√ß√µes: ${result.data.stats.totalOrganizations}`);
    console.log(`   Organiza√ß√µes ativas: ${result.data.stats.activeOrganizations}`);
    console.log(`   Total usu√°rios: ${result.data.stats.totalUsers}`);
  } else {
    // Se der erro de permiss√£o, √© normal para usu√°rios owner (apenas admin pode ver stats do sistema)
    if (result.error.message?.includes('administradores')) {
      console.log('‚ö†Ô∏è  Acesso negado - apenas admin pode ver estat√≠sticas do sistema (comportamento esperado)');
      return true; // Consideramos sucesso pois a valida√ß√£o est√° funcionando
    }
    console.error('‚ùå Erro ao buscar estat√≠sticas do sistema:', result.error);
  }
  
  return result.success;
}

async function testCreateOrganization() {
  console.log('\n‚ûï Testando POST /api/organizations');
  
  const newOrg = {
    name: 'Organiza√ß√£o Teste CRUD',
    email: 'org.teste@email.com',
    document: '12.345.678/0001-90',
    phone: '(11) 88888-8888',
    address: {
      street: 'Rua Teste, 123',
      neighborhood: 'Centro',
      city: 'S√£o Paulo',
      state: 'SP',
      zip_code: '01000-000'
    }
  };
  
  const result = await makeRequest('POST', '/api/organizations', newOrg);
  
  if (result.success) {
    testOrgId = result.data.organization.id;
    console.log('‚úÖ Cria√ß√£o de organiza√ß√£o funcionando!');
    console.log(`   ID da organiza√ß√£o criada: ${testOrgId}`);
    console.log(`   Nome: ${result.data.organization.name}`);
    console.log(`   Slug: ${result.data.organization.slug}`);
  } else {
    // Se der erro de permiss√£o, √© normal para usu√°rios owner (apenas admin pode criar organiza√ß√µes)
    if (result.error.message?.includes('administradores')) {
      console.log('‚ö†Ô∏è  Acesso negado - apenas admin pode criar organiza√ß√µes (comportamento esperado)');
      return true; // Consideramos sucesso pois a valida√ß√£o est√° funcionando
    }
    console.error('‚ùå Erro ao criar organiza√ß√£o:', result.error);
  }
  
  return result.success;
}

async function testToggleOrganizationStatus() {
  if (!testOrgId) {
    console.log('\n‚ö†Ô∏è  Pulando teste TOGGLE STATUS - nenhuma organiza√ß√£o criada');
    return true; // Retorna true pois √© esperado quando n√£o temos permiss√£o de criar
  }
  
  console.log(`\nüîÑ Testando PATCH /api/organizations/${testOrgId}/toggle-status`);
  
  const result = await makeRequest('PATCH', `/api/organizations/${testOrgId}/toggle-status`);
  
  if (result.success) {
    console.log('‚úÖ Toggle de status funcionando!');
    console.log(`   Status atual: ${result.data.organization.isActive ? 'Ativo' : 'Inativo'}`);
  } else {
    // Se der erro de permiss√£o, √© normal para usu√°rios owner (apenas admin pode alterar status)
    if (result.error.message?.includes('administradores')) {
      console.log('‚ö†Ô∏è  Acesso negado - apenas admin pode alterar status (comportamento esperado)');
      return true;
    }
    console.error('‚ùå Erro ao alterar status:', result.error);
  }
  
  return result.success;
}

async function testDeleteOrganization() {
  if (!testOrgId) {
    console.log('\n‚ö†Ô∏è  Pulando teste DELETE - nenhuma organiza√ß√£o criada');
    return true; // Retorna true pois √© esperado quando n√£o temos permiss√£o de criar
  }
  
  console.log(`\nüóëÔ∏è  Testando DELETE /api/organizations/${testOrgId}`);
  
  const result = await makeRequest('DELETE', `/api/organizations/${testOrgId}`);
  
  if (result.success) {
    console.log('‚úÖ Exclus√£o de organiza√ß√£o funcionando!');
    console.log('   Organiza√ß√£o deletada com sucesso');
  } else {
    // Se der erro de permiss√£o, √© normal para usu√°rios owner (apenas admin pode deletar)
    if (result.error.message?.includes('administradores')) {
      console.log('‚ö†Ô∏è  Acesso negado - apenas admin pode deletar organiza√ß√µes (comportamento esperado)');
      return true;
    }
    console.error('‚ùå Erro ao deletar organiza√ß√£o:', result.error);
  }
  
  return result.success;
}

async function testErrorHandling() {
  console.log('\nüõ°Ô∏è  Testando tratamento de erros');
  
  // Teste 1: Atualizar organiza√ß√£o sem dados obrigat√≥rios
  const myOrgResult = await makeRequest('GET', '/api/organizations/my');
  if (myOrgResult.success) {
    const orgId = myOrgResult.data.organization.id;
    const result1 = await makeRequest('PUT', `/api/organizations/${orgId}`, {});
    
    if (!result1.success && result1.error.message?.includes('obrigat√≥rios')) {
      console.log('‚úÖ Valida√ß√£o de campos obrigat√≥rios funcionando!');
    } else {
      console.log('‚ùå Falha na valida√ß√£o de campos obrigat√≥rios');
    }
  }
  
  // Teste 2: Buscar organiza√ß√£o inexistente
  const result2 = await makeRequest('GET', '/api/organizations/00000000-0000-0000-0000-000000000000');
  if (!result2.success) {
    console.log('‚úÖ Tratamento de organiza√ß√£o n√£o encontrada funcionando!');
  } else {
    console.log('‚ùå Falha no tratamento de organiza√ß√£o n√£o encontrada');
  }
  
  // Teste 3: Acessar rota sem autentica√ß√£o
  const result3 = await makeRequest('GET', '/api/organizations/my', null, { 'Authorization': '' });
  if (!result3.success && result3.status === 401) {
    console.log('‚úÖ Prote√ß√£o de autentica√ß√£o funcionando!');
  } else {
    console.log('‚ùå Falha na prote√ß√£o de autentica√ß√£o');
  }
  
  return true;
}

async function runAllTests() {
  console.log('üß™ INICIANDO TESTES DE CRUD DE ORGANIZA√á√ïES');
  console.log('=' .repeat(50));
  
  const results = [];
  
  // 1. Login
  const loginSuccess = await login();
  if (!loginSuccess) {
    console.log('\n‚ùå Teste abortado - falha no login');
    return;
  }
  
  // 2. Testar todas as opera√ß√µes CRUD
  results.push({ test: 'GET My Organization', success: await testGetMyOrganization() });
  results.push({ test: 'GET My Organization Stats', success: await testGetMyOrganizationStats() });
  results.push({ test: 'UPDATE My Organization', success: await testUpdateMyOrganization() });
  results.push({ test: 'GET Organization by ID', success: await testGetOrganizationById() });
  results.push({ test: 'GET All Organizations', success: await testGetAllOrganizations() });
  results.push({ test: 'GET System Stats', success: await testGetSystemStats() });
  results.push({ test: 'CREATE Organization', success: await testCreateOrganization() });
  results.push({ test: 'TOGGLE Organization Status', success: await testToggleOrganizationStatus() });
  results.push({ test: 'DELETE Organization', success: await testDeleteOrganization() });
  results.push({ test: 'Error Handling', success: await testErrorHandling() });
  
  // Resumo
  console.log('\n' + '=' .repeat(50));
  console.log('üìä RESUMO DOS TESTES:');
  console.log('=' .repeat(50));
  
  let successCount = 0;
  results.forEach(result => {
    const status = result.success ? '‚úÖ' : '‚ùå';
    console.log(`${status} ${result.test}`);
    if (result.success) successCount++;
  });
  
  console.log('\n' + '=' .repeat(50));
  console.log(`üéØ RESULTADO FINAL: ${successCount}/${results.length} testes passaram`);
  
  if (successCount === results.length) {
    console.log('üéâ TODOS OS TESTES DE ORGANIZA√á√ïES PASSARAM!');
  } else {
    console.log('‚ö†Ô∏è  Alguns testes falharam - verificar logs acima');
  }
  
  console.log('\nüìù OBSERVA√á√ÉO: Alguns recursos s√£o restritos apenas para admins do sistema.');
  console.log('   Usu√°rios "owner" t√™m acesso limitado por quest√µes de seguran√ßa.');
}

// Executar testes
runAllTests().catch(console.error);


